{"ast":null,"code":"import _toConsumableArray from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useMutation, useQuery, useSubscription } from '@apollo/client';\nimport { getAccessToken } from '../auth/auth';\nimport { ADD_MESSAGE_MUTATION, MESSAGES_QUERY, MESSAGE_ADDED_SUBSCRIPTION } from './queries';\nexport function useAddMessage() {\n  _s();\n\n  var _useMutation = useMutation(ADD_MESSAGE_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      mutate = _useMutation2[0];\n\n  return {\n    addMessage: function () {\n      var _addMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n        var _yield$mutate, message;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return mutate({\n                  variables: {\n                    input: {\n                      text: text\n                    }\n                  },\n                  context: {\n                    headers: {\n                      'Authorization': 'Bearer ' + getAccessToken()\n                    }\n                  }\n                });\n\n              case 2:\n                _yield$mutate = _context.sent;\n                message = _yield$mutate.data.message;\n                return _context.abrupt(\"return\", message);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function addMessage(_x) {\n        return _addMessage.apply(this, arguments);\n      }\n\n      return addMessage;\n    }()\n  };\n}\n\n_s(useAddMessage, \"grlonYozFypkfP0s7vTF79Oo2Ls=\", false, function () {\n  return [useMutation];\n});\n\nexport function useMessages() {\n  _s2();\n\n  var _data$messages;\n\n  var _useQuery = useQuery(MESSAGES_QUERY, {\n    context: {\n      headers: {\n        'Authorization': 'Bearer ' + getAccessToken()\n      }\n    }\n  }),\n      data = _useQuery.data;\n\n  console.log(\"datos del useMessages\", data);\n  var subscription = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    onSubscriptionData: function onSubscriptionData(_ref) {\n      var client = _ref.client,\n          subscriptionData = _ref.subscriptionData;\n      console.log(\"Mensajes obtenidos desde el server\", subscriptionData.data.message);\n      console.log(client);\n      var message = subscriptionData.data.message;\n      client.cache.updateQuery({\n        query: MESSAGES_QUERY\n      }, function (_ref2) {\n        var messages = _ref2.messages;\n        return {\n          messages: [].concat(_toConsumableArray(messages), [message])\n        };\n      });\n    }\n  });\n  return {\n    messages: (_data$messages = data === null || data === void 0 ? void 0 : data.messages) !== null && _data$messages !== void 0 ? _data$messages : []\n  };\n}\n\n_s2(useMessages, \"UgZ33Cqajnx93JhqaUCTruaujB4=\", false, function () {\n  return [useQuery, useSubscription];\n});","map":{"version":3,"sources":["D:/Programming/Trabajo/MGRN/EcommercePointi/client/graphql/hooks.js"],"names":["useMutation","useQuery","useSubscription","getAccessToken","ADD_MESSAGE_MUTATION","MESSAGES_QUERY","MESSAGE_ADDED_SUBSCRIPTION","useAddMessage","mutate","addMessage","text","variables","input","context","headers","message","data","useMessages","console","log","subscription","onSubscriptionData","client","subscriptionData","cache","updateQuery","query","messages"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,eAAhC,QAAuD,gBAAvD;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,oBAAT,EAA+BC,cAA/B,EAA+CC,0BAA/C,QAAiF,WAAjF;AAEA,OAAO,SAASC,aAAT,GAAyB;AAAA;;AAAA,qBAEbP,WAAW,CAACI,oBAAD,CAFE;AAAA;AAAA,MAEvBI,MAFuB;;AAI9B,SAAO;AACLC,IAAAA,UAAU;AAAA,iFAAE,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC0BF,MAAM,CAAC;AACzCG,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAE;AAAEF,sBAAAA,IAAI,EAAJA;AAAF;AAAT,mBAD8B;AAEzCG,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,OAAO,EAAE;AAAE,uCAAiB,YAAYX,cAAc;AAA7C;AADF;AAFgC,iBAAD,CADhC;;AAAA;AAAA;AACMY,gBAAAA,OADN,iBACFC,IADE,CACMD,OADN;AAAA,iDAOHA,OAPG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADL,GAAP;AAWD;;GAfeR,a;UAEGP,W;;;AAenB,OAAO,SAASiB,WAAT,GAAuB;AAAA;;AAAA;;AAAA,kBAEXhB,QAAQ,CAACI,cAAD,EAAiB;AACxCQ,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE;AAAE,yBAAiB,YAAYX,cAAc;AAA7C;AADF;AAD+B,GAAjB,CAFG;AAAA,MAEpBa,IAFoB,aAEpBA,IAFoB;;AAO5BE,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCH,IAArC;AAEA,MAAMI,YAAY,GAAGlB,eAAe,CAACI,0BAAD,EAA6B;AAC/De,IAAAA,kBAAkB,EAAE,kCAAkC;AAAA,UAA/BC,MAA+B,QAA/BA,MAA+B;AAAA,UAAvBC,gBAAuB,QAAvBA,gBAAuB;AACpDL,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDI,gBAAgB,CAACP,IAAjB,CAAsBD,OAAxE;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AAEA,UAAMP,OAAO,GAAGQ,gBAAgB,CAACP,IAAjB,CAAsBD,OAAtC;AACAO,MAAAA,MAAM,CAACE,KAAP,CAAaC,WAAb,CAAyB;AAAEC,QAAAA,KAAK,EAAErB;AAAT,OAAzB,EAAoD,iBAAkB;AAAA,YAAfsB,QAAe,SAAfA,QAAe;AACpE,eAAO;AAAEA,UAAAA,QAAQ,+BAAMA,QAAN,IAAgBZ,OAAhB;AAAV,SAAP;AACD,OAFD;AAGD;AAT8D,GAA7B,CAApC;AAYA,SAAO;AACLY,IAAAA,QAAQ,oBAAEX,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEW,QAAR,2DAAoB;AADvB,GAAP;AAGD;;IAxBeV,W;UAEGhB,Q,EAOIC,e","sourcesContent":["import { useMutation, useQuery, useSubscription } from '@apollo/client';\r\nimport { getAccessToken } from '../auth/auth';\r\nimport { ADD_MESSAGE_MUTATION, MESSAGES_QUERY, MESSAGE_ADDED_SUBSCRIPTION } from './queries';\r\n\r\nexport function useAddMessage() {\r\n\r\n  const [mutate] = useMutation(ADD_MESSAGE_MUTATION);\r\n\r\n  return {\r\n    addMessage: async (text) => {\r\n      const { data: { message } } = await mutate({\r\n        variables: { input: { text } },\r\n        context: {\r\n          headers: { 'Authorization': 'Bearer ' + getAccessToken() },\r\n        },\r\n      });\r\n      return message;\r\n    },\r\n  };\r\n}\r\n\r\nexport function useMessages() {\r\n\r\n  const { data } = useQuery(MESSAGES_QUERY, {\r\n    context: {\r\n      headers: { 'Authorization': 'Bearer ' + getAccessToken() },\r\n    },\r\n  });\r\n  console.log(\"datos del useMessages\", data);\r\n\r\n  const subscription = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\r\n    onSubscriptionData: ({ client, subscriptionData }) => {\r\n      console.log(\"Mensajes obtenidos desde el server\", subscriptionData.data.message);\r\n      console.log(client);\r\n\r\n      const message = subscriptionData.data.message;\r\n      client.cache.updateQuery({ query: MESSAGES_QUERY }, ({ messages }) => {\r\n        return { messages: [...messages, message] };\r\n      });\r\n    },\r\n  });\r\n\r\n  return {\r\n    messages: data?.messages ?? [],\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}