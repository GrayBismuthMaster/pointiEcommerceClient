{"ast":null,"code":"var _jsxFileName = \"D:\\\\Cursos\\\\FrontEnd Javascript\\\\Next\\\\React Avanzado Fullstack Next.js, Apollo, MongoDB y GraphQL\\\\Ejercicios\\\\cliente\\\\clientecrm\\\\pages\\\\editarCliente\\\\[id].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Layout from '../../components/Layout';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nconst OBTENER_CLIENTE = gql`\n  query obtenerCliente($id : ID!){\n    obtenerCliente(id: $id){\n      nombre \n      apellido\n      email\n      telefono \n      empresa\n    }\n  }\n`;\nconst ACTUALIZAR_CLIENTE = gql`\n  mutation actualizarCliente($id : ID!, $input : ClienteInput){\n    actualizarCliente(id: $id, input : $input){\n      nombre\n      email\n    }\n  }\n`;\n\nconst EditarCliente = () => {\n  const router = useRouter();\n  const {\n    query: {\n      id\n    }\n  } = router;\n  console.log(id); //Consultar para obtener el cliente\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(OBTENER_CLIENTE, {\n    variables: {\n      id\n    }\n  }); //Actualizar el cliente \n  // Esquema de validación\n\n  const validationSchema = Yup.object({\n    nombre: Yup.string().required('El nombre del cliente es obligatorio'),\n    apellido: Yup.string().required('El apellido del cliente es obligatorio'),\n    empresa: Yup.string().required('El campo empresa es obligatorio'),\n    email: Yup.string().email('Email no válido').required('El email del cliente es obligatorio')\n  });\n  if (loading) return \"cargando...\";\n  console.log(data.obtenerCliente);\n  const {\n    obtenerCliente\n  } = data;\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    className: \"text-2xl text-gray-800 font-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"Editar Cliente\"), __jsx(\"div\", {\n    className: \"flex justify-center mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"w-full max-w-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, __jsx(Formik, {\n    validationSchema: validationSchema,\n    enableReinitialize: true,\n    initialValues: obtenerCliente,\n    onSubmit: (valores, funciones) => {\n      console.log(valores);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, props => {\n    console.log(props);\n    return __jsx(\"form\", {\n      className: \"bg-white rounded shadow-md px-8 pt-6 pb-8 mb-4\",\n      onSubmit: props.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 23\n      }\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"nombre\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 31\n      }\n    }, \"Nombre\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"nombre\",\n      type: \"text\",\n      placeholder: \"Nombre Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n      ,\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.nombre,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 31\n      }\n    })), props.touched.nombre && props.errors.nombre ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 31\n      }\n    }, __jsx(\"p\", {\n      className: \"font-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    }, \"Error\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 33\n      }\n    }, \" \", props.errors.nombre)) : null, __jsx(\"div\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"apellido\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 31\n      }\n    }, \"Apellido\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"apellido\",\n      type: \"text\",\n      placeholder: \"Apellido Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n      ,\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.apellido,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 31\n      }\n    })), props.touched.apellido && props.errors.apellido ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 31\n      }\n    }, __jsx(\"p\", {\n      className: \"font-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 33\n      }\n    }, \"Error\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 33\n      }\n    }, \" \", props.errors.apellido)) : null, __jsx(\"div\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 23\n      }\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"empresa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 31\n      }\n    }, \"Empresa\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"empresa\",\n      type: \"text\",\n      placeholder: \"Empresa Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n      ,\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.empresa,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 31\n      }\n    })), props.touched.empresa && props.errors.empresa ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 31\n      }\n    }, __jsx(\"p\", {\n      className: \"font-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 33\n      }\n    }, \"Error\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 33\n      }\n    }, \" \", props.errors.empresa)) : null, __jsx(\"div\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 31\n      }\n    }, \"Email\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"email\",\n      type: \"email\",\n      placeholder: \"Email Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n      ,\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 31\n      }\n    })), props.touched.email && props.errors.email ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 31\n      }\n    }, __jsx(\"p\", {\n      className: \"font-bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 33\n      }\n    }, \"Error\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 33\n      }\n    }, \" \", props.errors.email)) : null, __jsx(\"div\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 23\n      }\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"telefono\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 31\n      }\n    }, \"Tel\\xE9fono\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"telefono\",\n      type: \"tel\",\n      placeholder: \"Tel\\xE9fono Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n      ,\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.telefono,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 31\n      }\n    })), __jsx(\"input\", {\n      type: \"submit\",\n      className: \"bg-gray-800 w-full mt-5 p-2 text-white uppercase font-bold hover:bg-gray-900\",\n      value: \"Editar Cliente\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 23\n      }\n    }));\n  }))));\n};\n\nexport default EditarCliente;","map":{"version":3,"sources":["D:/Cursos/FrontEnd Javascript/Next/React Avanzado Fullstack Next.js, Apollo, MongoDB y GraphQL/Ejercicios/cliente/clientecrm/pages/editarCliente/[id].js"],"names":["React","useRouter","Layout","useQuery","gql","useMutation","Formik","Yup","OBTENER_CLIENTE","ACTUALIZAR_CLIENTE","EditarCliente","router","query","id","console","log","data","loading","error","variables","validationSchema","object","nombre","string","required","apellido","empresa","email","obtenerCliente","valores","funciones","props","handleSubmit","handleChange","handleBlur","values","touched","errors","telefono"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,WAAxB,QAA2C,gBAA3C;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,MAAMC,eAAe,GAAGJ,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAYA,MAAMK,kBAAkB,GAAGL,GAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;;AAQA,MAAMM,aAAa,GAAG,MAAM;AACxB,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAM;AAACW,IAAAA,KAAK,EAAG;AAACC,MAAAA;AAAD;AAAT,MAAiBF,MAAvB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ,EAHwB,CAIxB;;AACA,QAAM;AAACG,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA;AAAhB,MAAyBf,QAAQ,CAACK,eAAD,EAAkB;AACvDW,IAAAA,SAAS,EAAG;AACVN,MAAAA;AADU;AAD2C,GAAlB,CAAvC,CALwB,CAWxB;AAEA;;AACA,QAAMO,gBAAgB,GAAGb,GAAG,CAACc,MAAJ,CAAW;AAClCC,IAAAA,MAAM,EAAEf,GAAG,CAACgB,MAAJ,GACMC,QADN,CACe,sCADf,CAD0B;AAGjCC,IAAAA,QAAQ,EAAElB,GAAG,CAACgB,MAAJ,GACGC,QADH,CACY,wCADZ,CAHuB;AAKjCE,IAAAA,OAAO,EAAEnB,GAAG,CAACgB,MAAJ,GACIC,QADJ,CACa,iCADb,CALwB;AAOjCG,IAAAA,KAAK,EAACpB,GAAG,CAACgB,MAAJ,GACOI,KADP,CACa,iBADb,EAEOH,QAFP,CAEgB,qCAFhB;AAP2B,GAAX,CAAzB;AAWA,MAAIP,OAAJ,EAAa,OAAO,aAAP;AAEbH,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACY,cAAjB;AACA,QAAM;AAACA,IAAAA;AAAD,MAAmBZ,IAAzB;AACF,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,mCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAGE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,gBAAgB,EAAEI,gBADpB;AAEE,IAAA,kBAAkB,MAFpB;AAGE,IAAA,aAAa,EAAEQ,cAHjB;AAIE,IAAA,QAAQ,EAAI,CAACC,OAAD,EAAUC,SAAV,KAAsB;AAChChB,MAAAA,OAAO,CAACC,GAAR,CAAYc,OAAZ;AACD,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGE,KAAK,IAAI;AACRjB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,KAAZ;AACA,WACE;AACI,MAAA,SAAS,EAAC,gDADd;AAEI,MAAA,QAAQ,EAAEA,KAAK,CAACC,YAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQ;AAAO,MAAA,SAAS,EAAC,4CAAjB;AAA8D,MAAA,OAAO,EAAC,QAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADR,EAIQ;AACI,MAAA,SAAS,EAAC,4HADd;AAEI,MAAA,EAAE,EAAC,QAFP;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,WAAW,EAAC,gBAJhB,CAKI;AALJ;AAOI,MAAA,QAAQ,EAAED,KAAK,CAACE,YAPpB;AAQI,MAAA,MAAM,EAAEF,KAAK,CAACG,UARlB;AASI,MAAA,KAAK,EAAIH,KAAK,CAACI,MAAN,CAAab,MAT1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,CAJJ,EAoBMS,KAAK,CAACK,OAAN,CAAcd,MAAd,IAAwBS,KAAK,CAACM,MAAN,CAAaf,MAArC,GACM;AAAK,MAAA,SAAS,EAAC,4DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKS,KAAK,CAACM,MAAN,CAAaf,MAAlB,CAFF,CADN,GAKK,IAzBX,EA4BI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQ;AAAO,MAAA,SAAS,EAAC,4CAAjB;AAA8D,MAAA,OAAO,EAAC,UAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADR,EAIQ;AACI,MAAA,SAAS,EAAC,4HADd;AAEI,MAAA,EAAE,EAAC,UAFP;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,WAAW,EAAC,kBAJhB,CAKI;AALJ;AAOM,MAAA,QAAQ,EAAES,KAAK,CAACE,YAPtB;AAQM,MAAA,MAAM,EAAEF,KAAK,CAACG,UARpB;AASM,MAAA,KAAK,EAAIH,KAAK,CAACI,MAAN,CAAaV,QAT5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,CA5BJ,EA4CMM,KAAK,CAACK,OAAN,CAAcX,QAAd,IAA0BM,KAAK,CAACM,MAAN,CAAaZ,QAAvC,GACM;AAAK,MAAA,SAAS,EAAC,4DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKM,KAAK,CAACM,MAAN,CAAaZ,QAAlB,CAFF,CADN,GAKK,IAjDX,EAoDI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQ;AAAO,MAAA,SAAS,EAAC,4CAAjB;AAA8D,MAAA,OAAO,EAAC,SAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADR,EAIQ;AACI,MAAA,SAAS,EAAC,4HADd;AAEI,MAAA,EAAE,EAAC,SAFP;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,WAAW,EAAC,iBAJhB,CAKI;AALJ;AAOM,MAAA,QAAQ,EAAEM,KAAK,CAACE,YAPtB;AAQM,MAAA,MAAM,EAAEF,KAAK,CAACG,UARpB;AASM,MAAA,KAAK,EAAIH,KAAK,CAACI,MAAN,CAAaT,OAT5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,CApDJ,EAoEMK,KAAK,CAACK,OAAN,CAAcV,OAAd,IAAyBK,KAAK,CAACM,MAAN,CAAaX,OAAtC,GACM;AAAK,MAAA,SAAS,EAAC,4DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKK,KAAK,CAACM,MAAN,CAAaX,OAAlB,CAFF,CADN,GAKK,IAzEX,EA2EI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQ;AAAO,MAAA,SAAS,EAAC,4CAAjB;AAA8D,MAAA,OAAO,EAAC,OAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADR,EAIQ;AACI,MAAA,SAAS,EAAC,4HADd;AAEI,MAAA,EAAE,EAAC,OAFP;AAGI,MAAA,IAAI,EAAC,OAHT;AAII,MAAA,WAAW,EAAC,eAJhB,CAKI;AALJ;AAOM,MAAA,QAAQ,EAAEK,KAAK,CAACE,YAPtB;AAQM,MAAA,MAAM,EAAEF,KAAK,CAACG,UARpB;AASM,MAAA,KAAK,EAAIH,KAAK,CAACI,MAAN,CAAaR,KAT5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,CA3EJ,EA2FMI,KAAK,CAACK,OAAN,CAAcT,KAAd,IAAuBI,KAAK,CAACM,MAAN,CAAaV,KAApC,GACM;AAAK,MAAA,SAAS,EAAC,4DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKI,KAAK,CAACM,MAAN,CAAaV,KAAlB,CAFF,CADN,GAKK,IAhGX,EAmGI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQ;AAAO,MAAA,SAAS,EAAC,4CAAjB;AAA8D,MAAA,OAAO,EAAC,UAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADR,EAIQ;AACI,MAAA,SAAS,EAAC,4HADd;AAEI,MAAA,EAAE,EAAC,UAFP;AAGI,MAAA,IAAI,EAAC,KAHT;AAII,MAAA,WAAW,EAAC,qBAJhB,CAKI;AALJ;AAOM,MAAA,QAAQ,EAAEI,KAAK,CAACE,YAPtB;AAQM,MAAA,MAAM,EAAEF,KAAK,CAACG,UARpB;AASM,MAAA,KAAK,EAAIH,KAAK,CAACI,MAAN,CAAaG,QAT5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,CAnGJ,EAoHI;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,SAAS,EAAC,8EAFd;AAGI,MAAA,KAAK,EAAC,gBAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApHJ,CADF;AA4HD,GAvIH,CADF,CADJ,CAHF,CADF;AAqJD,CAlLD;;AAoLA,eAAe5B,aAAf","sourcesContent":["import React from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport Layout from '../../components/Layout';\r\nimport { useQuery, gql, useMutation } from '@apollo/client';\r\nimport {Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nconst OBTENER_CLIENTE = gql`\r\n  query obtenerCliente($id : ID!){\r\n    obtenerCliente(id: $id){\r\n      nombre \r\n      apellido\r\n      email\r\n      telefono \r\n      empresa\r\n    }\r\n  }\r\n`\r\n\r\nconst ACTUALIZAR_CLIENTE = gql `\r\n  mutation actualizarCliente($id : ID!, $input : ClienteInput){\r\n    actualizarCliente(id: $id, input : $input){\r\n      nombre\r\n      email\r\n    }\r\n  }\r\n`\r\nconst EditarCliente = () => {\r\n    const router = useRouter();\r\n    const {query : {id}} = router;\r\n    console.log(id)\r\n    //Consultar para obtener el cliente\r\n    const {data, loading, error} = useQuery(OBTENER_CLIENTE, {\r\n      variables : {\r\n        id\r\n      }\r\n    });\r\n\r\n    //Actualizar el cliente \r\n\r\n    // Esquema de validación\r\n    const validationSchema = Yup.object({\r\n      nombre: Yup.string()\r\n                   .required('El nombre del cliente es obligatorio'),\r\n       apellido: Yup.string()\r\n                   .required('El apellido del cliente es obligatorio'),\r\n       empresa: Yup.string()\r\n                   .required('El campo empresa es obligatorio'),\r\n       email:Yup.string()\r\n                   .email('Email no válido')\r\n                   .required('El email del cliente es obligatorio')\r\n   })\r\n    if (loading) return \"cargando...\";\r\n\r\n    console.log(data.obtenerCliente)\r\n    const {obtenerCliente} = data;\r\n  return (\r\n    <Layout>\r\n      <h1 className='text-2xl text-gray-800 font-light'>Editar Cliente</h1>\r\n      {/* {mensaje && mostrarMensaje()} */}\r\n      <div className='flex justify-center mt-5'>\r\n          <div className='w-full max-w-lg'>\r\n            <Formik\r\n              validationSchema={validationSchema}\r\n              enableReinitialize\r\n              initialValues={obtenerCliente}\r\n              onSubmit = {(valores, funciones)=>{\r\n                console.log(valores);\r\n              }}\r\n            >\r\n\r\n              {props => {\r\n                console.log(props);\r\n                return( \r\n                  <form\r\n                      className='bg-white rounded shadow-md px-8 pt-6 pb-8 mb-4'\r\n                      onSubmit={props.handleSubmit}\r\n                  >\r\n                      <div className=\"mb-4\">\r\n                              <label className='block text-gray-700 text-sm font-bold mb-2' htmlFor=\"nombre\">\r\n                                  Nombre\r\n                              </label>\r\n                              <input\r\n                                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                                  id=\"nombre\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Nombre Cliente\"\r\n                                  //Va revisando el cambio que se haga y lo coloca en el estado\r\n                                  \r\n                                  onChange={props.handleChange}\r\n                                  onBlur={props.handleBlur}\r\n                                  value = {props.values.nombre}\r\n                              />\r\n                      </div>\r\n                      { props.touched.nombre && props.errors.nombre ? (\r\n                              <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\">\r\n                                <p className=\"font-bold\">Error</p>\r\n                                <p> {props.errors.nombre}</p>  \r\n                              </div>\r\n                          ): null\r\n                      }\r\n\r\n                      <div className=\"mb-4\">\r\n                              <label className='block text-gray-700 text-sm font-bold mb-2' htmlFor=\"apellido\">\r\n                                  Apellido\r\n                              </label>\r\n                              <input\r\n                                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                                  id=\"apellido\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Apellido Cliente\"\r\n                                  //Va revisando el cambio que se haga y lo coloca en el estado\r\n                                  \r\n                                    onChange={props.handleChange}\r\n                                    onBlur={props.handleBlur}\r\n                                    value = {props.values.apellido}\r\n                              />\r\n                      </div>\r\n                      { props.touched.apellido && props.errors.apellido ? (\r\n                              <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\">\r\n                                <p className=\"font-bold\">Error</p>\r\n                                <p> {props.errors.apellido}</p>  \r\n                              </div>\r\n                          ): null\r\n                      }\r\n\r\n                      <div className=\"mb-4\">\r\n                              <label className='block text-gray-700 text-sm font-bold mb-2' htmlFor=\"empresa\">\r\n                                  Empresa\r\n                              </label>\r\n                              <input\r\n                                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                                  id=\"empresa\"\r\n                                  type=\"text\"\r\n                                  placeholder='Empresa Cliente'\r\n                                  //Va revisando el cambio que se haga y lo coloca en el estado\r\n                                  \r\n                                    onChange={props.handleChange}\r\n                                    onBlur={props.handleBlur}\r\n                                    value = {props.values.empresa}\r\n                              />\r\n                      </div>\r\n                      { props.touched.empresa && props.errors.empresa ? (\r\n                              <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\">\r\n                                <p className=\"font-bold\">Error</p>\r\n                                <p> {props.errors.empresa}</p>  \r\n                              </div>\r\n                          ): null\r\n                      }\r\n                      <div className=\"mb-4\">\r\n                              <label className='block text-gray-700 text-sm font-bold mb-2' htmlFor=\"email\">\r\n                                  Email\r\n                              </label>\r\n                              <input\r\n                                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                                  id=\"email\"\r\n                                  type=\"email\"\r\n                                  placeholder='Email Cliente'\r\n                                  //Va revisando el cambio que se haga y lo coloca en el estado\r\n                                  \r\n                                    onChange={props.handleChange}\r\n                                    onBlur={props.handleBlur}\r\n                                    value = {props.values.email}\r\n                              />\r\n                      </div>\r\n                      { props.touched.email && props.errors.email ? (\r\n                              <div className=\"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\">\r\n                                <p className=\"font-bold\">Error</p>\r\n                                <p> {props.errors.email}</p>  \r\n                              </div>\r\n                          ): null\r\n                      }\r\n\r\n                      <div className=\"mb-4\">\r\n                              <label className='block text-gray-700 text-sm font-bold mb-2' htmlFor=\"telefono\">\r\n                                  Teléfono\r\n                              </label>\r\n                              <input\r\n                                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                                  id=\"telefono\"\r\n                                  type=\"tel\"\r\n                                  placeholder='Teléfono Cliente'\r\n                                  //Va revisando el cambio que se haga y lo coloca en el estado\r\n                                  \r\n                                    onChange={props.handleChange}\r\n                                    onBlur={props.handleBlur}\r\n                                    value = {props.values.telefono}\r\n                              />\r\n                      </div>\r\n\r\n                      <input\r\n                          type='submit'\r\n                          className='bg-gray-800 w-full mt-5 p-2 text-white uppercase font-bold hover:bg-gray-900'\r\n                          value=\"Editar Cliente\"\r\n                      />\r\n                  </form>\r\n                )\r\n              }}\r\n              \r\n            </Formik>\r\n              \r\n          </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default EditarCliente"]},"metadata":{},"sourceType":"module"}