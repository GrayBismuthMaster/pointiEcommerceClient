{"ast":null,"code":"import { useMutation, useQuery, useSubscription } from '@apollo/client';\nimport { getAccessToken } from '../auth/auth';\nimport { ADD_MESSAGE_MUTATION, MESSAGES_QUERY, MESSAGE_ADDED_SUBSCRIPTION } from './queries';\nexport function useAddMessage() {\n  const [mutate] = useMutation(ADD_MESSAGE_MUTATION);\n  return {\n    addMessage: async text => {\n      const {\n        data: {\n          message\n        }\n      } = await mutate({\n        variables: {\n          input: {\n            text\n          }\n        },\n        context: {\n          headers: {\n            'Authorization': 'Bearer ' + getAccessToken()\n          }\n        }\n      });\n      return message;\n    }\n  };\n}\nexport function useMessages() {\n  var _data$messages;\n\n  const {\n    data\n  } = useQuery(MESSAGES_QUERY, {\n    context: {\n      headers: {\n        'Authorization': 'Bearer ' + getAccessToken()\n      }\n    }\n  });\n  console.log(\"datos del useMessages\", data);\n  useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    onSubscriptionData: ({\n      client,\n      subscriptionData\n    }) => {\n      console.log(\"Mensajes obtenidos desde el server\", subscriptionData.data.message);\n      console.log(client);\n      const message = subscriptionData.data.message;\n      client.cache.updateQuery({\n        query: MESSAGES_QUERY\n      }, ({\n        messages\n      }) => {\n        return {\n          messages: [...messages, message]\n        };\n      });\n    }\n  });\n  console.log(\"subscription\", subscription);\n  return {\n    messages: (_data$messages = data === null || data === void 0 ? void 0 : data.messages) !== null && _data$messages !== void 0 ? _data$messages : []\n  };\n}","map":{"version":3,"sources":["D:/Programming/Trabajo/MGRN/EcommercePointi/client/graphql/hooks.js"],"names":["useMutation","useQuery","useSubscription","getAccessToken","ADD_MESSAGE_MUTATION","MESSAGES_QUERY","MESSAGE_ADDED_SUBSCRIPTION","useAddMessage","mutate","addMessage","text","data","message","variables","input","context","headers","useMessages","console","log","onSubscriptionData","client","subscriptionData","cache","updateQuery","query","messages","subscription"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,eAAhC,QAAuD,gBAAvD;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,oBAAT,EAA+BC,cAA/B,EAA+CC,0BAA/C,QAAiF,WAAjF;AAEA,OAAO,SAASC,aAAT,GAAyB;AAE9B,QAAM,CAACC,MAAD,IAAWR,WAAW,CAACI,oBAAD,CAA5B;AAEA,SAAO;AACLK,IAAAA,UAAU,EAAE,MAAOC,IAAP,IAAgB;AAC1B,YAAM;AAAEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AAAR,UAAwB,MAAMJ,MAAM,CAAC;AACzCK,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAEJ,YAAAA;AAAF;AAAT,SAD8B;AAEzCK,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AAAE,6BAAiB,YAAYb,cAAc;AAA7C;AADF;AAFgC,OAAD,CAA1C;AAMA,aAAOS,OAAP;AACD;AATI,GAAP;AAWD;AAED,OAAO,SAASK,WAAT,GAAuB;AAAA;;AAI5B,QAAM;AAAEN,IAAAA;AAAF,MAAWV,QAAQ,CAACI,cAAD,EAAiB;AACxCU,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE;AAAE,yBAAiB,YAAYb,cAAc;AAA7C;AADF;AAD+B,GAAjB,CAAzB;AAKAe,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCR,IAArC;AAEAT,EAAAA,eAAe,CAACI,0BAAD,EAA6B;AAE1Cc,IAAAA,kBAAkB,EAAE,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAAkC;AACpDJ,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDG,gBAAgB,CAACX,IAAjB,CAAsBC,OAAxE;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AAEA,YAAMT,OAAO,GAAGU,gBAAgB,CAACX,IAAjB,CAAsBC,OAAtC;AACAS,MAAAA,MAAM,CAACE,KAAP,CAAaC,WAAb,CAAyB;AAAEC,QAAAA,KAAK,EAAEpB;AAAT,OAAzB,EAAoD,CAAC;AAAEqB,QAAAA;AAAF,OAAD,KAAkB;AACpE,eAAO;AAAEA,UAAAA,QAAQ,EAAE,CAAC,GAAGA,QAAJ,EAAcd,OAAd;AAAZ,SAAP;AACD,OAFD;AAGD;AAVyC,GAA7B,CAAf;AAYAM,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BQ,YAA5B;AACA,SAAO;AACLD,IAAAA,QAAQ,oBAAEf,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEe,QAAR,2DAAoB;AADvB,GAAP;AAGD","sourcesContent":["import { useMutation, useQuery, useSubscription } from '@apollo/client';\r\nimport { getAccessToken } from '../auth/auth';\r\nimport { ADD_MESSAGE_MUTATION, MESSAGES_QUERY, MESSAGE_ADDED_SUBSCRIPTION } from './queries';\r\n\r\nexport function useAddMessage() {\r\n\r\n  const [mutate] = useMutation(ADD_MESSAGE_MUTATION);\r\n\r\n  return {\r\n    addMessage: async (text) => {\r\n      const { data: { message } } = await mutate({\r\n        variables: { input: { text } },\r\n        context: {\r\n          headers: { 'Authorization': 'Bearer ' + getAccessToken() },\r\n        },\r\n      });\r\n      return message;\r\n    },\r\n  };\r\n}\r\n\r\nexport function useMessages() {\r\n\r\n\r\n\r\n  const { data } = useQuery(MESSAGES_QUERY, {\r\n    context: {\r\n      headers: { 'Authorization': 'Bearer ' + getAccessToken() },\r\n    },\r\n  });\r\n  console.log(\"datos del useMessages\", data);\r\n\r\n  useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\r\n    \r\n    onSubscriptionData: ({ client, subscriptionData }) => {\r\n      console.log(\"Mensajes obtenidos desde el server\", subscriptionData.data.message);\r\n      console.log(client);\r\n\r\n      const message = subscriptionData.data.message;\r\n      client.cache.updateQuery({ query: MESSAGES_QUERY }, ({ messages }) => {\r\n        return { messages: [...messages, message] };\r\n      });\r\n    },\r\n  });\r\n  console.log(\"subscription\", subscription);\r\n  return {\r\n    messages: data?.messages ?? [],\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}