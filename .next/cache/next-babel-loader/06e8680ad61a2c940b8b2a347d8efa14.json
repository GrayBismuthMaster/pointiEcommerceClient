{"ast":null,"code":"var __jsx = React.createElement;\nimport Link from 'next/link';\nimport React from 'react';\nimport Layout from '../components/Layout';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { gql, useMutation } from '@apollo/client';\nimport Swal from 'sweetalert2';\nimport router from 'next/router';\nimport { useAddMessage, useMessages } from '../graphql/hooks';\nconst NUEVO_PRODUCTO = gql`\n    mutation nuevoProducto($input : ProductoInput){\n        nuevoProducto(input : $input){\n            id\n            nombre\n            existencia\n            precio\n        }\n    }\n`;\nconst OBTENER_PRODUCTOS = gql`\n    query obtenerProductos{\n        obtenerProductos{\n            id\n            nombre\n            precio\n            existencia\n        }\n    }\n`;\n\nconst NuevoProducto = () => {\n  //CUSTOMHOOK PARA MENSAJE DE NUEVO PRODUCTO AGREGADO\n  const {\n    addMessage\n  } = useAddMessage(); //Mutation\n\n  const [nuevoProducto] = useMutation(NUEVO_PRODUCTO, {\n    update(cache, {\n      data: {\n        nuevoProducto\n      }\n    }) {\n      //OBtener objeto de cache\n      const {\n        obtenerProductos\n      } = cache.readQuery({\n        query: OBTENER_PRODUCTOS\n      });\n      console.log(\"Obtener productos desde update\", obtenerProductos); //Reescribir cache\n\n      cache.writeQuery({\n        query: OBTENER_PRODUCTOS,\n        data: {\n          obtenerProductos: [...obtenerProductos, nuevoProducto]\n        }\n      });\n    }\n\n  }); //Formulario para nuevos productos\n\n  const formik = useFormik({\n    initialValues: {\n      nombre: '',\n      existencia: '',\n      precio: ''\n    },\n    validationSchema: Yup.object({\n      nombre: Yup.string().required('El nombre del producto es obligatorio'),\n      existencia: Yup.number().required('Agrega la cantidad disponible').positive('No se aceptan números negativos').integer('La existencia deben ser enteros'),\n      precio: Yup.number().required('El precio es obligatorio').positive(' Los números deben ser positivos')\n    }),\n    onSubmit: async valores => {\n      const {\n        nombre,\n        existencia,\n        precio\n      } = valores;\n\n      if (window !== undefined) {\n        await addMessage(`Se agregó el producto ${nombre}`); // const message = await addMessage(`Se agregó el producto ${nombre}`);\n        // console.log(\"Mensaje desde onSubmit\", message);\n        // if(message.id !== undefined){\n\n        try {\n          //MENSAJE DE NUEVO PRODUCTO AGREGADO\n          const producto = await nuevoProducto({\n            variables: {\n              input: {\n                nombre,\n                existencia,\n                precio\n              }\n            }\n          });\n          console.log(\"Producto desde nuevo Producto\", producto);\n          Swal.fire('Creado', 'Se creó el producto correctamente', 'success').then(async () => {\n            await router.push('/productos');\n          });\n        } catch (error) {\n          console.log(error);\n        } // }\n\n      }\n    }\n  });\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"text-2xl text-gray-800 font-light \"\n  }, \"Crear nuevo producto\"), __jsx(\"div\", {\n    className: \"flex justify-center mt-5\"\n  }, __jsx(\"div\", {\n    className: \"w-full max-w-lg\"\n  }, __jsx(\"form\", {\n    className: \"bg-white rounded shadow-md px-8 pt-6 pb-8 mb-4\",\n    onSubmit: formik.handleSubmit\n  }, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-sm font-bold mb-2\",\n    htmlFor: \"nombre\"\n  }, \"Nombre\"), __jsx(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"nombre\",\n    type: \"text\",\n    placeholder: \"Nombre\" //Va revisando el cambio que se haga y lo coloca en el estado\n    ,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.nombre\n  })), formik.touched.nombre && formik.errors.nombre ? __jsx(\"div\", {\n    className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n  }, __jsx(\"p\", {\n    className: \"font-bold\"\n  }, \"Error\"), __jsx(\"p\", null, \" \", formik.errors.nombre)) : null, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-sm font-bold mb-2\",\n    htmlFor: \"nombre\"\n  }, \"Cantidad Disponible\"), __jsx(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"existencia\",\n    type: \"number\",\n    placeholder: \"Cantidad Disponible\" //Va revisando el cambio que se haga y lo coloca en el estado\n    ,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.existencia\n  })), formik.touched.existencia && formik.errors.existencia ? __jsx(\"div\", {\n    className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n  }, __jsx(\"p\", {\n    className: \"font-bold\"\n  }, \"Error\"), __jsx(\"p\", null, \" \", formik.errors.existencia)) : null, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-sm font-bold mb-2\",\n    htmlFor: \"nombre\"\n  }, \"Precio\"), __jsx(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"precio\",\n    type: \"number\",\n    placeholder: \"Precio Producto\" //Va revisando el cambio que se haga y lo coloca en el estado\n    ,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.precio\n  })), formik.touched.precio && formik.errors.precio ? __jsx(\"div\", {\n    className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n  }, __jsx(\"p\", {\n    className: \"font-bold\"\n  }, \"Error\"), __jsx(\"p\", null, \" \", formik.errors.precio)) : null, __jsx(\"input\", {\n    type: \"submit\",\n    className: \"bg-gray-800 w-full mt-5 p-2 text-white uppercase font-bold hover:bg-gray-900\",\n    value: \"Agregar Producto\"\n  })))));\n};\n\nexport default NuevoProducto;","map":null,"metadata":{},"sourceType":"module"}