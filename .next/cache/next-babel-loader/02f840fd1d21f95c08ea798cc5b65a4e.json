{"ast":null,"code":"import _defineProperty from \"D:/Cursos/React Avanzado Fullstack Next.js, Apollo, MongoDB y GraphQL/Ejercicios/cliente/clientecrm/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//http link permite conectarse con el servidor de apollo\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport fetch from 'node-fetch';\nimport { setContext } from 'apollo-link-context';\nvar httpLink = createHttpLink({\n  uri: 'http://localhost:4000',\n  fetch: fetch\n});\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  return {\n    headers: _objectSpread({}, headers)\n  };\n});\nvar client = new ApolloClient({\n  сonnectToDevTools: true,\n  cache: new InMemoryCache(),\n  link: new HttpLink({})\n});\nexport default client;","map":{"version":3,"sources":["D:/Cursos/React Avanzado Fullstack Next.js, Apollo, MongoDB y GraphQL/Ejercicios/cliente/clientecrm/config/apollo.js"],"names":["ApolloClient","createHttpLink","InMemoryCache","fetch","setContext","httpLink","uri","authLink","_","headers","client","сonnectToDevTools","cache","link","HttpLink"],"mappings":";;;;;;AAAA;AACA,SAAQA,YAAR,EAAsBC,cAAtB,EAAsCC,aAAtC,QAA0D,gBAA1D;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AAEA,IAAMC,QAAQ,GAAGJ,cAAc,CAAC;AACxBK,EAAAA,GAAG,EAAE,uBADmB;AAExBH,EAAAA,KAAK,EAALA;AAFwB,CAAD,CAA/B;AAKA,IAAMI,QAAQ,GAAGH,UAAU,CAAC,UAACI,CAAD,QAAiB;AAAA,MAAbC,OAAa,QAAbA,OAAa;AACzC,SAAO;AACHA,IAAAA,OAAO,oBACAA,OADA;AADJ,GAAP;AAKH,CAN0B,CAA3B;AAOA,IAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC5BW,EAAAA,iBAAiB,EAAE,IADS;AAE5BC,EAAAA,KAAK,EAAE,IAAIV,aAAJ,EAFqB;AAG5BW,EAAAA,IAAI,EAAE,IAAIC,QAAJ,CAAa,EAAb;AAHsB,CAAjB,CAAf;AAOA,eAAeJ,MAAf","sourcesContent":["//http link permite conectarse con el servidor de apollo\r\nimport {ApolloClient, createHttpLink, InMemoryCache} from '@apollo/client';\r\nimport fetch from 'node-fetch'\r\nimport {setContext} from 'apollo-link-context'\r\n\r\nconst httpLink = createHttpLink({\r\n        uri: 'http://localhost:4000',\r\n        fetch\r\n})\r\n\r\nconst authLink = setContext((_,{headers}) => {\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n        }\r\n    }\r\n});\r\nconst client = new ApolloClient({\r\n    сonnectToDevTools: true,\r\n    cache: new InMemoryCache(),\r\n    link: new HttpLink({\r\n    })\r\n});\r\n\r\nexport default client;"]},"metadata":{},"sourceType":"module"}