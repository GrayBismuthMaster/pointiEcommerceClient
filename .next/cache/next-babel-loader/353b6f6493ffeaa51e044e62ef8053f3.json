{"ast":null,"code":"import _regeneratorRuntime from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      query obtenerClientesVendedor {\\n        obtenerClientesVendedor{\\n          id\\n          nombre\\n          apellido\\n          empresa\\n          email\\n        }\\n      }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation nuevoCliente($input: ClienteInput){\\n        nuevoCliente(input: $input){\\n            id\\n            nombre \\n            apellido\\n            empresa\\n            email\\n            telefono\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport Layout from '../components/Layout';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { gql, useMutation } from '@apollo/client';\nimport { useRouter } from 'next/router';\nvar NUEVO_CLIENTE = gql(_templateObject());\nvar OBTENER_CLIENTES_USUARIO = gql(_templateObject2());\n\nvar NuevoCliente = function NuevoCliente() {\n  //State del mensaje\n  var _useState = useState(null),\n      mensaje = _useState[0],\n      guardarMensaje = _useState[1]; //Router\n\n\n  var router = useRouter(); //Mutation para crear nuevos Clientes\n\n  var _useMutation = useMutation(NUEVO_CLIENTE, {\n    update: function update(cache, _ref) {\n      var nuevoCliente = _ref.data.nuevoCliente;\n\n      //Obtener el objeto de cach'e que deseamos actualizar \n      //Tomar una copia del cache\n      var _cache$readQuery = cache.readQuery({\n        query: OBTENER_CLIENTES_USUARIO\n      }),\n          obtenerClientesVendedor = _cache$readQuery.obtenerClientesVendedor; //Reescribimos el caché \n\n\n      cache.writeQuery({\n        query: OBTENER_CLIENTES_USUARIO,\n        data: {\n          //Actualizar la información \n          obtenerClientesVendedor: [].concat(_toConsumableArray(obtenerClientesVendedor), [nuevoCliente])\n        }\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      nuevoCliente = _useMutation2[0];\n\n  var formik = useFormik({\n    initialValues: {\n      nombre: '',\n      apellido: '',\n      empresa: '',\n      email: '',\n      telefono: ''\n    },\n    validationSchema: Yup.object({\n      nombre: Yup.string().required('El nombre del cliente es obligatorio'),\n      apellido: Yup.string().required('El apellido del cliente es obligatorio'),\n      empresa: Yup.string().required('El campo empresa es obligatorio'),\n      email: Yup.string().email('Email no válido').required('El email del cliente es obligatorio')\n    }),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(valores) {\n        var nombre, apellido, empresa, email, telefono, _yield$nuevoCliente, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nombre = valores.nombre, apellido = valores.apellido, empresa = valores.empresa, email = valores.email, telefono = valores.telefono;\n                console.log(valores);\n                _context.prev = 2;\n                _context.next = 5;\n                return nuevoCliente({\n                  variables: {\n                    input: {\n                      nombre: nombre,\n                      apellido: apellido,\n                      empresa: empresa,\n                      email: email,\n                      telefono: telefono\n                    }\n                  }\n                });\n\n              case 5:\n                _yield$nuevoCliente = _context.sent;\n                data = _yield$nuevoCliente.data;\n                console.log(data.nuevoCliente);\n                router.push('/');\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n                guardarMensaje(_context.t0.message.replace('GraphQL error', ''));\n                setTimeout(function () {\n                  guardarMensaje(null);\n                }, 3000);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 11]]);\n      }));\n\n      function onSubmit(_x) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n\n  var mostrarMensaje = function mostrarMensaje() {\n    return __jsx(\"div\", {\n      className: \"bg-white py-2 px-3 w-full my-3 max-w-sm text-center mx-auto\"\n    }, __jsx(\"p\", null, mensaje));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"text-2xl text-gray-800 font-light\"\n  }, \"Nuevo Cliente\"), mensaje && mostrarMensaje(), __jsx(\"div\", {\n    className: \"flex justify-center mt-5\"\n  }, __jsx(\"div\", {\n    className: \"w-full max-w-lg\"\n  }, __jsx(\"form\", {\n    className: \"bg-white rounded shadow-md px-8 pt-6 pb-8 mb-4\",\n    onSubmit: formik.handleSubmit\n  }, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-sm font-bold mb-2\",\n    htmlFor: \"nombre\"\n  }, \"Nombre\"), __jsx(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"nombre\",\n    type: \"text\",\n    placeholder: \"Nombre Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n    ,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.nombre\n  })), formik.touched.nombre && formik.errors.nombre ? __jsx(\"div\", {\n    className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n  }, __jsx(\"p\", {\n    className: \"font-bold\"\n  }, \"Error\"), __jsx(\"p\", null, \" \", formik.errors.nombre)) : null, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-sm font-bold mb-2\",\n    htmlFor: \"apellido\"\n  }, \"Apellido\"), __jsx(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"apellido\",\n    type: \"text\",\n    placeholder: \"Apellido Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n    ,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.apellido\n  })), formik.touched.apellido && formik.errors.apellido ? __jsx(\"div\", {\n    className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n  }, __jsx(\"p\", {\n    className: \"font-bold\"\n  }, \"Error\"), __jsx(\"p\", null, \" \", formik.errors.apellido)) : null, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-sm font-bold mb-2\",\n    htmlFor: \"empresa\"\n  }, \"Empresa\"), __jsx(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"empresa\",\n    type: \"text\",\n    placeholder: \"Empresa Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n    ,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.empresa\n  })), formik.touched.empresa && formik.errors.empresa ? __jsx(\"div\", {\n    className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n  }, __jsx(\"p\", {\n    className: \"font-bold\"\n  }, \"Error\"), __jsx(\"p\", null, \" \", formik.errors.empresa)) : null, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-sm font-bold mb-2\",\n    htmlFor: \"email\"\n  }, \"Email\"), __jsx(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"email\",\n    type: \"email\",\n    placeholder: \"Email Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n    ,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.email\n  })), formik.touched.email && formik.errors.email ? __jsx(\"div\", {\n    className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n  }, __jsx(\"p\", {\n    className: \"font-bold\"\n  }, \"Error\"), __jsx(\"p\", null, \" \", formik.errors.email)) : null, __jsx(\"div\", {\n    className: \"mb-4\"\n  }, __jsx(\"label\", {\n    className: \"block text-gray-700 text-sm font-bold mb-2\",\n    htmlFor: \"telefono\"\n  }, \"Tel\\xE9fono\"), __jsx(\"input\", {\n    className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"telefono\",\n    type: \"tel\",\n    placeholder: \"Tel\\xE9fono Cliente\" //Va revisando el cambio que se haga y lo coloca en el estado\n    ,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.telefono\n  })), __jsx(\"input\", {\n    type: \"submit\",\n    className: \"bg-gray-800 w-full mt-5 p-2 text-white uppercase font-bold hover:bg-gray-900\",\n    value: \"Registrar Cliente\"\n  }))))));\n};\n\nexport default NuevoCliente;","map":null,"metadata":{},"sourceType":"module"}