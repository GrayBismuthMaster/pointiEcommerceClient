{"ast":null,"code":"import _defineProperty from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//http link permite conectarse con el servidor de apollo\nimport fetch from 'node-fetch';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { Kind, OperationTypeNode } from 'graphql';\nimport { createClient as createWsClient } from 'graphql-ws';\nimport { getAccessToken } from '../auth/auth';\nvar httpLink = new HttpLink({\n  uri: 'http://localhost:9000/graphql'\n});\nvar wsLink = true ? new GraphQLWsLink(createWsClient({\n  url: 'ws://localhost:9000/graphql' // connectionParams: () => ({ accessToken: getAccessToken() }),\n\n})) : null;\n\nfunction isSubscription(_ref) {\n  var query = _ref.query;\n  var definition = getMainDefinition(query);\n  return definition.kind === Kind.OPERATION_DEFINITION && definition.operation === OperationTypeNode.SUBSCRIPTION;\n}\n\nvar authLink = setContext(function (_, _ref2) {\n  var headers = _ref2.headers;\n  //Leer el storage almacenado\n  var token = localStorage.getItem('token');\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? \"Bearer \".concat(token) : ''\n    })\n  };\n});\nvar client = new ApolloClient({\n  —ÅonnectToDevTools: true,\n  cache: new InMemoryCache(),\n  link: true ? split(isSubscription, wsLink, authLink.concat(httpLink)) : null\n});\nexport default client;","map":null,"metadata":{},"sourceType":"module"}