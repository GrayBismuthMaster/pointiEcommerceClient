{"ast":null,"code":"import _defineProperty from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//http link permite conectarse con el servidor de apollo\nimport fetch from 'node-fetch';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { Kind, OperationTypeNode } from 'graphql';\nimport { createClient as createWsClient } from 'graphql-ws'; // import { getAccessToken } from '../auth';\n\nvar httpLink = new HttpLink({\n  uri: 'http://localhost:9000/graphql'\n});\nvar wsLink = true ? new GraphQLWsLink(createWsClient({\n  url: 'ws://localhost:9000/graphql' // connectionParams: () => ({ accessToken: getAccessToken() }),\n\n})) : null;\n\nfunction isSubscription(_ref) {\n  var query = _ref.query;\n  var definition = getMainDefinition(query);\n  return definition.kind === Kind.OPERATION_DEFINITION && definition.operation === OperationTypeNode.SUBSCRIPTION;\n}\n\nvar authLink = setContext(function (_, _ref2) {\n  var headers = _ref2.headers;\n  //Leer el storage almacenado\n  var token = localStorage.getItem('token');\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? \"Bearer \".concat(token) : ''\n    })\n  };\n});\nvar client = new ApolloClient({\n  сonnectToDevTools: true,\n  cache: new InMemoryCache(),\n  link: split(isSubscription, wsLink, authLink.concat(httpLink))\n});\nexport default client;","map":{"version":3,"sources":["D:/Programming/Trabajo/MGRN/EcommercePointi/client/config/apollo.js"],"names":["fetch","setContext","ApolloClient","HttpLink","InMemoryCache","split","GraphQLWsLink","getMainDefinition","Kind","OperationTypeNode","createClient","createWsClient","httpLink","uri","wsLink","url","isSubscription","query","definition","kind","OPERATION_DEFINITION","operation","SUBSCRIPTION","authLink","_","headers","token","localStorage","getItem","authorization","client","сonnectToDevTools","cache","link","concat"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAAgDC,KAAhD,QAA6D,gBAA7D;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,IAAT,EAAeC,iBAAf,QAAwC,SAAxC;AACA,SAASC,YAAY,IAAIC,cAAzB,QAA+C,YAA/C,C,CACA;;AAEA,IAAMC,QAAQ,GAAG,IAAIT,QAAJ,CAAa;AAC1BU,EAAAA,GAAG,EAAE;AADqB,CAAb,CAAjB;AAKA,IAAMC,MAAM,GACR,OAEA,IAAIR,aAAJ,CAAkBK,cAAc,CAAC;AAC7BI,EAAAA,GAAG,EAAE,6BADwB,CAE7B;;AAF6B,CAAD,CAAhC,CAFA,GAQA,IATJ;;AAYA,SAASC,cAAT,OAAmC;AAAA,MAATC,KAAS,QAATA,KAAS;AAC/B,MAAMC,UAAU,GAAGX,iBAAiB,CAACU,KAAD,CAApC;AACA,SAAOC,UAAU,CAACC,IAAX,KAAoBX,IAAI,CAACY,oBAAzB,IACAF,UAAU,CAACG,SAAX,KAAyBZ,iBAAiB,CAACa,YADlD;AAEH;;AAED,IAAMC,QAAQ,GAAGtB,UAAU,CAAC,UAACuB,CAAD,SAAiB;AAAA,MAAbC,OAAa,SAAbA,OAAa;AACzC;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,SAAO;AACHH,IAAAA,OAAO,kCACAA,OADA;AAEHI,MAAAA,aAAa,EAAEH,KAAK,oBAAaA,KAAb,IAAuB;AAFxC;AADJ,GAAP;AAMH,CAT0B,CAA3B;AAUA,IAAMI,MAAM,GAAG,IAAI5B,YAAJ,CAAiB;AAC5B6B,EAAAA,iBAAiB,EAAE,IADS;AAE5BC,EAAAA,KAAK,EAAE,IAAI5B,aAAJ,EAFqB;AAG5B6B,EAAAA,IAAI,EAAE5B,KAAK,CAACW,cAAD,EAAiBF,MAAjB,EAAyBS,QAAQ,CAACW,MAAT,CAAgBtB,QAAhB,CAAzB;AAHiB,CAAjB,CAAf;AAMA,eAAekB,MAAf","sourcesContent":["//http link permite conectarse con el servidor de apollo\r\nimport fetch from 'node-fetch'\r\nimport {setContext} from 'apollo-link-context'\r\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\r\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\nimport { Kind, OperationTypeNode } from 'graphql';\r\nimport { createClient as createWsClient } from 'graphql-ws';\r\n// import { getAccessToken } from '../auth';\r\n\r\nconst httpLink = new HttpLink({\r\n    uri: 'http://localhost:9000/graphql',\r\n  });\r\n  \r\n\r\nconst wsLink =\r\n    typeof window !== 'undefined'\r\n        ?\r\n    new GraphQLWsLink(createWsClient({\r\n        url: 'ws://localhost:9000/graphql',\r\n        // connectionParams: () => ({ accessToken: getAccessToken() }),\r\n    }))\r\n    \r\n    :\r\n    null\r\n\r\n\r\nfunction isSubscription({ query }) {\r\n    const definition = getMainDefinition(query);\r\n    return definition.kind === Kind.OPERATION_DEFINITION\r\n        && definition.operation === OperationTypeNode.SUBSCRIPTION;\r\n}\r\n  \r\nconst authLink = setContext((_,{headers}) => {\r\n    //Leer el storage almacenado\r\n    const token = localStorage.getItem('token');\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `Bearer ${token}` : ''\r\n        }\r\n    }\r\n});\r\nconst client = new ApolloClient({\r\n    сonnectToDevTools: true,\r\n    cache: new InMemoryCache(),\r\n    link: split(isSubscription, wsLink, authLink.concat(httpLink) )\r\n});\r\n\r\nexport default client"]},"metadata":{},"sourceType":"module"}