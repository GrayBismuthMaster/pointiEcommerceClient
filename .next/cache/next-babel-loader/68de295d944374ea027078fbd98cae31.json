{"ast":null,"code":"import { useMutation, useQuery, useSubscription } from '@apollo/client';\nimport { getAccessToken } from '../auth/auth';\nimport { ADD_MESSAGE_MUTATION, MESSAGES_QUERY, MESSAGE_ADDED_SUBSCRIPTION } from './queries';\nexport function useAddMessage() {\n  const [mutate] = useMutation(ADD_MESSAGE_MUTATION);\n  return {\n    addMessage: async text => {\n      const {\n        data: {\n          message\n        }\n      } = await mutate({\n        variables: {\n          input: {\n            text\n          }\n        },\n        context: {\n          headers: {\n            'Authorization': 'Bearer ' + getAccessToken()\n          }\n        }\n      });\n      return message;\n    }\n  };\n}\nexport function useMessages() {\n  var _data$messages;\n\n  const {\n    data\n  } = useQuery(MESSAGES_QUERY, {\n    context: {\n      headers: {\n        'Authorization': 'Bearer ' + getAccessToken()\n      }\n    }\n  });\n  useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    onSubscriptionData: ({\n      client,\n      subscriptionData\n    }) => {\n      console.log(\"Mensajes obtenidos desde el server\", subscriptionData.data.message);\n      console.log(client);\n      const message = subscriptionData.data.message;\n      client.cache.updateQuery({\n        query: MESSAGES_QUERY\n      }, ({\n        messages\n      }) => {\n        return {\n          messages: [...messages, message]\n        };\n      });\n    }\n  }); // console.log(\"subscription\", subscription);\n\n  return {\n    messages: (_data$messages = data === null || data === void 0 ? void 0 : data.messages) !== null && _data$messages !== void 0 ? _data$messages : []\n  };\n}","map":null,"metadata":{},"sourceType":"module"}