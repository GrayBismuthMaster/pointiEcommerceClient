{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer } from 'react';\nimport PedidoContext from './PedidoContext';\nimport PedidoReducer from './PedidoReducer';\nimport { SELECCIONAR_CLIENTE, SELECCIONAR_PRODUCTO, CANTIDAD_PRODUCTOS, ACTUALIZAR_TOTAL } from '../../types';\n\nconst PedidoState = ({\n  children\n}) => {\n  //State de Pedidos\n  const initialState = {\n    cliente: {},\n    productos: [],\n    total: 0\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(PedidoReducer, initialState);\n\n  const agregarCliente = cliente => {\n    dispatch({\n      type: SELECCIONAR_CLIENTE,\n      payload: cliente\n    });\n  };\n\n  const agregarProductos = productosSeleccionados => {\n    console.log(\"productos seleccionados del state\");\n    console.log(state.productos);\n    let nuevoState;\n\n    if (state.productos.length > 0) {\n      //Tomar del segundo arreglo, una copia para asignarlo al primero\n      nuevoState = productosSeleccionados.map(producto => {\n        const nuevoObjeto = state.productos.find(productoState => productoState.id === producto.id);\n        return _objectSpread(_objectSpread({}, producto), nuevoObjeto);\n      });\n    } else {\n      nuevoState = productosSeleccionados;\n    }\n\n    dispatch({\n      type: SELECCIONAR_PRODUCTO,\n      payload: nuevoState\n    });\n  };\n\n  const cantidadProductos = nuevoProducto => {\n    dispatch({\n      type: CANTIDAD_PRODUCTOS,\n      payload: nuevoProducto\n    });\n  };\n\n  const actualizarTotal = () => {\n    dispatch({\n      type: ACTUALIZAR_TOTAL\n    });\n  };\n\n  return __jsx(PedidoContext.Provider, {\n    value: {\n      cliente: state.cliente,\n      productos: state.productos,\n      total: state.total,\n      agregarCliente,\n      agregarProductos,\n      cantidadProductos,\n      actualizarTotal\n    }\n  }, children);\n};\n\nexport default PedidoState;","map":null,"metadata":{},"sourceType":"module"}