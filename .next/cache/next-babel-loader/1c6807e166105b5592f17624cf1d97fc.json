{"ast":null,"code":"import _toConsumableArray from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useMutation, useQuery, useSubscription } from '@apollo/client';\nimport { getAccessToken } from '../auth/auth';\nimport { ADD_MESSAGE_MUTATION, MESSAGES_QUERY, MESSAGE_ADDED_SUBSCRIPTION } from './queries';\nexport function useAddMessage() {\n  var _useMutation = useMutation(ADD_MESSAGE_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      mutate = _useMutation2[0];\n\n  return {\n    addMessage: function () {\n      var _addMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n        var _yield$mutate, message;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return mutate({\n                  variables: {\n                    input: {\n                      text: text\n                    }\n                  },\n                  context: {\n                    headers: {\n                      'Authorization': 'Bearer ' + getAccessToken()\n                    }\n                  }\n                });\n\n              case 2:\n                _yield$mutate = _context.sent;\n                message = _yield$mutate.data.message;\n                return _context.abrupt(\"return\", message);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function addMessage(_x) {\n        return _addMessage.apply(this, arguments);\n      }\n\n      return addMessage;\n    }()\n  };\n}\nexport function useMessages() {\n  var _data$messages;\n\n  var _useQuery = useQuery(MESSAGES_QUERY, {\n    context: {\n      headers: {\n        'Authorization': 'Bearer ' + getAccessToken()\n      }\n    }\n  }),\n      data = _useQuery.data;\n\n  useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    onSubscriptionData: function onSubscriptionData(_ref) {\n      var client = _ref.client,\n          subscriptionData = _ref.subscriptionData;\n      console.log(\"Mensajes obtenidos desde el server\", subscriptionData.data.message);\n      console.log(client);\n      var message = subscriptionData.data.message;\n      client.cache.updateQuery({\n        query: MESSAGES_QUERY\n      }, function (_ref2) {\n        var messages = _ref2.messages;\n        return {\n          messages: [].concat(_toConsumableArray(messages), [message])\n        };\n      });\n    }\n  }); // console.log(\"subscription\", subscription);\n\n  return {\n    messages: (_data$messages = data === null || data === void 0 ? void 0 : data.messages) !== null && _data$messages !== void 0 ? _data$messages : []\n  };\n}","map":null,"metadata":{},"sourceType":"module"}