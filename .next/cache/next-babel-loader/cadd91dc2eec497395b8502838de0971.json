{"ast":null,"code":"import _regeneratorRuntime from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"D:/Programming/Trabajo/MGRN/EcommercePointi/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation actualizarProducto($id : ID!, $input : ProductoInput){\\n        actualizarProducto(id : $id, input : $input){\\n            id\\n            nombre\\n            existencia\\n            precio\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query obtenerProducto($id : ID!){\\n        obtenerProducto(id : $id){\\n            nombre\\n            precio\\n            existencia\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Layout from '../../components/Layout';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Swal from 'sweetalert2';\nvar OBTENER_PRODUCTO = gql(_templateObject());\nvar ACTUALIZAR_PRODUCTO = gql(_templateObject2());\n\nvar EditarProducto = function EditarProducto() {\n  var router = useRouter();\n  var id = router.query.id; //COnsultar para obtener el producto\n\n  var _useQuery = useQuery(OBTENER_PRODUCTO, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error; //Mutation para modificar el producto\n\n\n  var _useMutation = useMutation(ACTUALIZAR_PRODUCTO),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      actualizarProducto = _useMutation2[0]; //Schema de Validación\n\n\n  var validationSchema = Yup.object({\n    nombre: Yup.string().required('El nombre del producto es obligatorio'),\n    existencia: Yup.number().required('Agrega la cantidad disponible').positive('No se aceptan números negativos').integer('La existencia deben ser enteros'),\n    precio: Yup.number().required('El precio es obligatorio').positive(' Los números deben ser positivos')\n  });\n  if (loading) return 'Cargando ... ';\n\n  if (!data) {\n    return \"Acción no permitida\";\n  }\n\n  var obtenerProducto = data.obtenerProducto;\n\n  var actualizarInfoProducto = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(valores) {\n      var nombre, existencia, precio, _yield$actualizarProd, _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // console.log(valores)\n              nombre = valores.nombre, existencia = valores.existencia, precio = valores.precio;\n              _context.prev = 1;\n              _context.next = 4;\n              return actualizarProducto({\n                variables: {\n                  id: id,\n                  input: {\n                    nombre: nombre,\n                    existencia: existencia,\n                    precio: precio\n                  }\n                }\n              });\n\n            case 4:\n              _yield$actualizarProd = _context.sent;\n              _data = _yield$actualizarProd.data;\n              console.log('acta;zsis');\n              console.log(_data); //Alerta\n\n              Swal.fire(\"Correcto\", \"Producto actualizdo correctamente\", 'success'); //Reidreccion\n\n              router.push('/productos');\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    return function actualizarInfoProducto(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"text-2xl text-gray-800 font-light\"\n  }, \"Editar Producto\"), __jsx(\"div\", {\n    className: \"flex justify-center mt-5\"\n  }, __jsx(\"div\", {\n    className: \"w-full max-w-lg\"\n  }, __jsx(Formik, {\n    enableReinitialize: true,\n    initialValues: obtenerProducto,\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(valores) {\n      actualizarInfoProducto(valores);\n    }\n  }, function (props) {\n    return __jsx(\"form\", {\n      className: \"bg-white rounded shadow-md px-8 pt-6 pb-8 mb-4\",\n      onSubmit: props.handleSubmit\n    }, __jsx(\"div\", {\n      className: \"mb-4\"\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"nombre\"\n    }, \"Nombre\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"nombre\",\n      type: \"text\",\n      placeholder: \"Nombre\" //Va revisando el cambio que se haga y lo coloca en el estado\n      ,\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.nombre\n    })), props.touched.nombre && props.errors.nombre ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n    }, __jsx(\"p\", {\n      className: \"font-bold\"\n    }, \"Error\"), __jsx(\"p\", null, \" \", props.errors.nombre)) : null, __jsx(\"div\", {\n      className: \"mb-4\"\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"nombre\"\n    }, \"Cantidad Disponible\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"existencia\",\n      type: \"number\",\n      placeholder: \"Cantidad Disponible\" //Va revisando el cambio que se haga y lo coloca en el estado\n      ,\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.existencia\n    })), props.touched.existencia && props.errors.existencia ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n    }, __jsx(\"p\", {\n      className: \"font-bold\"\n    }, \"Error\"), __jsx(\"p\", null, \" \", props.errors.existencia)) : null, __jsx(\"div\", {\n      className: \"mb-4\"\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"nombre\"\n    }, \"Precio\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"precio\",\n      type: \"number\",\n      placeholder: \"Precio Producto\" //Va revisando el cambio que se haga y lo coloca en el estado\n      ,\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.precio\n    })), props.touched.precio && props.errors.precio ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n    }, __jsx(\"p\", {\n      className: \"font-bold\"\n    }, \"Error\"), __jsx(\"p\", null, \" \", props.errors.precio)) : null, __jsx(\"input\", {\n      type: \"submit\",\n      className: \"bg-gray-800 w-full mt-5 p-2 text-white uppercase font-bold hover:bg-gray-900\",\n      value: \"Agregar Producto\"\n    }));\n  }))));\n};\n\nexport default EditarProducto;","map":null,"metadata":{},"sourceType":"module"}