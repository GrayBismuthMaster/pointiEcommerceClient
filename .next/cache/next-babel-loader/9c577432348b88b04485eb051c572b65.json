{"ast":null,"code":"import _taggedTemplateLiteral from \"D:/Cursos/FrontEnd Javascript/Next/React Avanzado Fullstack Next.js, Apollo, MongoDB y GraphQL/Ejercicios/cliente/clientecrm/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Cursos\\\\FrontEnd Javascript\\\\Next\\\\React Avanzado Fullstack Next.js, Apollo, MongoDB y GraphQL\\\\Ejercicios\\\\cliente\\\\clientecrm\\\\components\\\\pedidos\\\\AsignarCliente.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query obtenerClientesVendedor {\\n    obtenerClientesVendedor {\\n      id\\n      nombre\\n      apellido\\n      empresa\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { gql, useQuery } from '@apollo/client';\nimport PedidoContext from '../../context/pedidos/PedidoContext';\nvar OBTENER_CLIENTES_USUARIO = gql(_templateObject());\n\nvar AsignarCliente = function AsignarCliente() {\n  _s();\n\n  var _useState = useState([]),\n      clientes = _useState[0],\n      setClientes = _useState[1]; //COnsultar la base de datos\n\n\n  var _useQuery = useQuery(OBTENER_CLIENTES_USUARIO),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  console.log(data);\n  var options = [{\n    id: \"jeje\",\n    nombre: \"sapo\"\n  }, {\n    id: \"jqwq\",\n    nombre: \"pollo\"\n  }, {\n    id: \"sdfsdf\",\n    nombre: \"asdasd\"\n  }];\n  useEffect(function () {\n    console.log(clientes);\n    return function () {};\n  }, [clientes]);\n\n  var seleccionarCliente = function seleccionarCliente(clientes) {\n    setClientes(clientes);\n  };\n\n  if (loading) return \"cargando ...\";\n  var obtenerClientesVendedor = data.obtenerClientesVendedor;\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"1.- Asigna un cliente al pedido\"), __jsx(Select, {\n    className: \"mt-3\",\n    options: obtenerClientesVendedor,\n    isMulti: true,\n    onChange: function onChange(option) {\n      return seleccionarCliente(option);\n    },\n    getOptionValue: function getOptionValue(opciones) {\n      return opciones.id;\n    },\n    getOptionLabel: function getOptionLabel(opciones) {\n      return opciones.nombre;\n    },\n    placeholder: 'Seleccione el cliente',\n    noOptionsMessage: \"NO hay ese cliente\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(AsignarCliente, \"L+RJLAGnIUYp/+GZYSZ8WvBEBQ8=\", false, function () {\n  return [useQuery];\n});\n\n_c = AsignarCliente;\nexport default AsignarCliente;\n\nvar _c;\n\n$RefreshReg$(_c, \"AsignarCliente\");","map":{"version":3,"sources":["D:/Cursos/FrontEnd Javascript/Next/React Avanzado Fullstack Next.js, Apollo, MongoDB y GraphQL/Ejercicios/cliente/clientecrm/components/pedidos/AsignarCliente.js"],"names":["React","useEffect","useState","Select","gql","useQuery","PedidoContext","OBTENER_CLIENTES_USUARIO","AsignarCliente","clientes","setClientes","data","loading","error","console","log","options","id","nombre","seleccionarCliente","obtenerClientesVendedor","option","opciones"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAAQC,GAAR,EAAaC,QAAb,QAA4B,gBAA5B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,IAAMC,wBAAwB,GAAGH,GAAH,mBAA9B;;AAYA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA;;AAAA,kBACKN,QAAQ,CAAC,EAAD,CADb;AAAA,MACpBO,QADoB;AAAA,MACVC,WADU,iBAE3B;;;AAF2B,kBAGIL,QAAQ,CAACE,wBAAD,CAHZ;AAAA,MAGpBI,IAHoB,aAGpBA,IAHoB;AAAA,MAGdC,OAHc,aAGdA,OAHc;AAAA,MAGLC,KAHK,aAGLA,KAHK;;AAI3BC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,MAAMK,OAAO,GAAG,CACZ;AAACC,IAAAA,EAAE,EAAG,MAAN;AAAcC,IAAAA,MAAM,EAAG;AAAvB,GADY,EAGZ;AAACD,IAAAA,EAAE,EAAG,MAAN;AAAcC,IAAAA,MAAM,EAAG;AAAvB,GAHY,EAKZ;AAACD,IAAAA,EAAE,EAAG,QAAN;AAAgBC,IAAAA,MAAM,EAAI;AAA1B,GALY,CAAhB;AASAjB,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAEF,WAAO,YAAM,CAEZ,CAFD;AAGD,GANU,EAMR,CAACA,QAAD,CANQ,CAAT;;AAQF,MAAMU,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAV,QAAQ,EAAI;AACnCC,IAAAA,WAAW,CAACD,QAAD,CAAX;AACH,GAFD;;AAGE,MAAIG,OAAJ,EAAa,OAAO,cAAP;AA1Bc,MA4BpBQ,uBA5BoB,GA4BOT,IA5BP,CA4BpBS,uBA5BoB;AA8B3B,SACE,4BACE;AAAG,IAAA,SAAS,EAAC,oFAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE,MAAC,MAAD;AACM,IAAA,SAAS,EAAC,MADhB;AAEM,IAAA,OAAO,EAAIA,uBAFjB;AAGM,IAAA,OAAO,MAHb;AAIM,IAAA,QAAQ,EAAE,kBAACC,MAAD;AAAA,aAAUF,kBAAkB,CAACE,MAAD,CAA5B;AAAA,KAJhB;AAKM,IAAA,cAAc,EAAI,wBAACC,QAAD;AAAA,aAAYA,QAAQ,CAACL,EAArB;AAAA,KALxB;AAMM,IAAA,cAAc,EAAI,wBAACK,QAAD;AAAA,aAAYA,QAAQ,CAACJ,MAArB;AAAA,KANxB;AAOM,IAAA,WAAW,EAAI,uBAPrB;AAQM,IAAA,gBAAgB,EAAI,oBAR1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAgBD,CA9CD;;GAAMV,c;UAG2BH,Q;;;KAH3BG,c;AAgDN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Select from 'react-select'\r\nimport {gql, useQuery} from '@apollo/client';\r\nimport PedidoContext from '../../context/pedidos/PedidoContext';\r\nconst OBTENER_CLIENTES_USUARIO = gql`\r\n  query obtenerClientesVendedor {\r\n    obtenerClientesVendedor {\r\n      id\r\n      nombre\r\n      apellido\r\n      empresa\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nconst AsignarCliente = () => {\r\n  const [clientes, setClientes] = useState([]);\r\n  //COnsultar la base de datos\r\n  const {data, loading, error} = useQuery(OBTENER_CLIENTES_USUARIO);\r\n  console.log(data)\r\n\r\n  const options = [\r\n      {id : \"jeje\", nombre : \"sapo\"},\r\n      \r\n      {id : \"jqwq\", nombre : \"pollo\"},\r\n      \r\n      {id : \"sdfsdf\", nombre :  \"asdasd\"}\r\n  ]\r\n\r\n  \r\n  useEffect(() => {\r\n    console.log(clientes);\r\n\r\n  return () => {\r\n    \r\n  }\r\n}, [clientes])\r\n\r\nconst seleccionarCliente = clientes => {\r\n    setClientes(clientes);\r\n}\r\n  if (loading) return \"cargando ...\"\r\n\r\n  const {obtenerClientesVendedor} = data;\r\n\r\n  return (\r\n    <>\r\n      <p className='mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold'>1.- Asigna un cliente al pedido</p>\r\n      <Select\r\n            className='mt-3'\r\n            options = {obtenerClientesVendedor}\r\n            isMulti\r\n            onChange={(option)=>seleccionarCliente(option)}\r\n            getOptionValue = {(opciones)=>opciones.id}\r\n            getOptionLabel = {(opciones)=>opciones.nombre}\r\n            placeholder = {'Seleccione el cliente'}\r\n            noOptionsMessage = {\"NO hay ese cliente\"}\r\n      />\r\n    </>\r\n    \r\n  )\r\n}\r\n\r\nexport default AsignarCliente"]},"metadata":{},"sourceType":"module"}